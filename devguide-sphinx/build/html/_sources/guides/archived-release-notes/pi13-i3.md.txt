## PI13 - I3

### OVERVIEW

- **Medusa**: Node.js edge microservices can, and should, now be built with [Medusa].

### CHECKLIST

**INFRASTRUCTURE**
- `dev5`: `EksJ-VpcA-useast1-DeliveryDevQA-Dev5`. Kube config file available [here](../files/kubeconfig-dev5)
- Monitoring tools page: http://monitoring.eksj-useast1.eks.eis-deliverydevqa.cloud
- **New Jenkins server** [jenkins-refarch15d](https://jenkins-refarch15d.eis-platformlive.cloud) for medusa-based projects.
- For non JSB or Node.js edge microservices on refarch1.5: [jenkins-refarch15a](https://jenkins-refarch15a.eis-platformlive.cloud)

Here's a summary of changes required for the RefArch 1.5 services. Please see the detailed sections in this guide for more details on any of these.

**ALL services using Medusa**

1. Ensure you have a [`performanceDefinition.yaml` file](https://github.com/EBSCOIS/platform.infrastructure.medusa#performance-tests). This file is now required. Previously, the assertion was that a service needed either a jmeter test _or_ a dark release, but since dark release is not yet viable without customer load, jmeter tests are the only option.

2. The base image used to run `JMeter` performance tests in the pipeline via `Medusa` has been updated from `version-3.3` to `version-5.0`. The new version will work with `JDK 11`. Please test your `jmx` files on `jmeter 5.0` ahead of the initial deployment on `refarch15d` to ensure compatibility.

3. [Verification of Team in OpsGenie](#verification-of-team-in-opsgenie) during build deployments will begin with this release. Please review the section for more information.

**JAVA services**

Apply the following changes, in addition to the ones in the *All services* section above.

1. Follow the steps from the release notes to switch to the `refarch15d`, the [new jenkins server](https://jenkins-refarch15d.eis-platformlive.cloud) for all services that use `[Medusa]`.

2. Follow the steps from the release notes section for [Gradle 5.1.1 upgrade](#gradle-511-upgrade).

**NODE services**

Apply the following changes, in addition to the ones in the *All services* section above.

1. Follow the steps from the release notes section [Node.js Edge Microservices on Medusa](#nodejs-edge-microservices-on-medusa) to migrate node projects to the `medusa` pipeline library leveraging the new node archetype.

### DEPRECATIONS/CHANGES

#### New Jenkins Server (refarch15d) for services that use Medusa ONLY

**NOTE: Jenkins server jenkins-refarch15c will be decommissioned at the end of I4, if your project is on jenkins-refarch15c, it needs to be migrated to jenkins-refarch15d**

- If you are **not** using / migrating to [Medusa], you should continue to use the `refarch15a` Jenkins instance & label
- The new Jenkins server is located at: https://jenkins-refarch15d.eis-platformlive.cloud
- To move your job from https://jenkins-refarch15c.eis-platformlive.cloud to https://jenkins-refarch15d.eis-platformlive.cloud
  - Remove the `jenkins-refarch15c` label from your repo
  - Confirm job was removed from https://jenkins-refarch15c.eis-platformlive.cloud
  - Add a new label `jenkins-refarch15d` to your repo
  - Confirm job was added from https://jenkins-refarch15d.eis-platformlive.cloud
  - **When switching labels, delete the old label and create a new label with 'jenkins-refarch15d'. Do not edit the existing label**
- The only library supported in `jenkins-refarch15d` is [Medusa]

#### Verification of Team in OpsGenie

Before deploying a service into a cluster, medusa will verify that the team identified in a projects applicationDefinition.yaml file exists in OpsGenie. If the team does not exist in OpsGenie, the pipeline will print a warning in the Jenkins console output. In a future drop, this warning will become an error. For more information on how to add teams to OpsGenie, please refer to this guide: [Observability.md#opsgenie](https://github.com/EBSCOIS/platform.training.refarch1.5-devguide/blob/master/guides/Observability.md#opsgenie)

### NEW FEATURES

#### Gradle 5.1.1 upgrade

Java libraries and non-medusa Java projects that are built on [jenkins-refarch15a](https://jenkins-refarch15a.eis-platformlive.cloud) using `201777367430.dkr.ecr.us-east-1.amazonaws.com/platform/images/gradle-refarch15a` docker image should update `build.gradle` file appropriately. Gradle 5 introduced breaking changes.

JSB repositories that use [Medusa] should make the following changes:
- Remove `dependencyManagement` imports in `build.gradle` and convert them to `dependencies`. Imports in dependencies should look like:
  ```gradle
  dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.cloud:spring-cloud-contract-dependencies:${springCloudContractVersion}")
    implementation platform("com.amazonaws:aws-java-sdk-bom:${amazonAWSJavaSDKVersion}")
    ...
  }
  ```
- Change the following in `build.gradle dependencies` section:
  - `compile` -> `implementation`
  - `testCompile` -> `testImplementation`
- References to `compile` in `configurations` section should be changed to `implementation`. For example:
  ```gradle
  configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
  }
  ```
- Replace `getResolvedVersionOf` function in `build.gradle` with the following:
  ```gradle
  def getResolvedVersionOf(dependency) {
    return configurations.compileClasspath.resolvedConfiguration.resolvedArtifacts.find { it.name == dependency }.moduleVersion.id.version
  }
  ```
- Run the following command to upgrade gradle wrapper to version 5.1.1:
  - `./gradlew wrapper --gradle-version 5.1.1 --distribution-type all`
- Stage and commit all the changes that includes the following files:
  - `gradle/wrapper/gradle-wrapper.jar`
  - `gradle/wrapper/gradle-wrapper.properties`
  - `gradlew`
  - `build.gradle`

#### Node.js Edge Microservices on Medusa

Support for Node.js Edge microservices on the [Medusa] pipeline is being released. Services using [Medusa] can no longer reference the old [pipelineLibrary](https://github.com/EBSCOIS/platform.infrastructure.pipelinelibrary).

##### Node.js Projects Migrating to Medusa

To migrate to the [Medusa] Pipeline, refer to the detailed instructions in the [Node Archetype README](https://github.com/EBSCOIS/platform.infrastructure.medusa-archetypes/blob/master/docs/node-edge-microservice-v1.md) and [Medusa Pipeline Library README](https://github.com/EBSCOIS/platform.infrastructure.medusa#manual-setup-and-migrating-from-refArch-10), as well as the items below.

2 documents in this 'devguide' have been updated to reflect that they now apply to both JSB and Node.js edge microservces:
  * [Deploy_JSB_or_Node_microservice.md](./Deploy_JSB_or_Node_microservice.md)
  * [Development_Operating_Procedures_JSB_or_Node_Microservices.md](./Development_Operating_Procedures_JSB_or_Node_Microservices.md)

The following details require close attention when migrating a Node.js project to the [Medusa] pipeline:

* **Application Definition metadata**
  * The format of the Application Definition file required by [Medusa] better supports non-microservice projects (e.g., [Medusa], hydra). See [here for schema](https://github.com/EBSCOIS/platform.infrastructure.medusa#application-definition-file)
    * **Action**: ensure that your application definition adheres to the new schema

* **AWS Cost Tag Metadata**
  * The costtagextractor component is replaced by functionality in [Medusa].
  * The source of truth for allowed content in AWS cost management tags has changed. Metadata is now sourced from the [Medusa Data Validator repository](https://github.com/EBSCOIS/platform.infrastructure.medusa-data-validator).
  * The allowed content of the AWS cost management tags has been updated to better reflect the desired state.
    * **Action**: ensure that the `Domain`, `Market`, `Team`, and `Art` fields within your application manifest contain valid values (see [AWS Cost Tag Application Metadata](https://github.com/EBSCOIS/platform.infrastructure.medusa-data-validator#aws-cost-tag-application-metadata))

* **Repository Names**
  * Repository names are validated by the [Medusa] against the application definition
      * Repository name **MUST** match `domain.market.applicationName.git`
      * **Action**: rename repository BEFORE attaching it to new Jenkins

* **Deployment Manifest**
  * As described in the [Medusa Readme Deployment Manifest File](https://github.com/EBSCOIS/platform.infrastructure.medusa/blob/master/README.md#deployment-manifest-file) section, your deployment manifest file must be moved into `pipeline/deploymentManifest/` within your project repo. It must also be named `deploymentManifest.yaml`

* **Performance Test Files:** As described in the [Medusa Readme Performance Tests](https://github.com/EBSCOIS/platform.infrastructure.medusa/blob/master/README.md#performance-tests) section, performance tests must be moved into `tests/performance/` within your project repo. Also described there is a Performance Definition file that must be added to your repo in `pipeline/performance/`

* **Contract Test Files:** As described in the [node-edge-microservice Contract Test Requirements](https://github.com/EBSCOIS/platform.infrastructure.medusa-archetypes/blob/master/docs/node-edge-microservice-v1.md#contract-test-requirements) section, contract test definitions must be moved into `tests/contract/testDefinitions/` within your project repo.

* **Services Manifest:** As described in the [node-edge-microservice Stub Services Manifiest](https://github.com/EBSCOIS/platform.infrastructure.medusa-archetypes/blob/master/docs/node-edge-microservice-v1.md#stub-services-manifest-pipelinestubrunnerservicesmanifestyaml) section, a `servicesManifest.yaml` must be created in order for Medusa to orchestrate integration/contract tests.

* **Branch names:** [Medusa] supports building from branches that conform to a strict naming convention, i.e. Node.js microservice development branches must be prefixed with `feature/`. Full details of [Medusa] branch name support can be found [here in the Medusa Readme](https://github.com/EBSCOIS/platform.infrastructure.medusa/blob/master/README.md#repository-branches)

* **Versioning Change** [Medusa] changes the versioning method used to Semantic Versioning.  This replaces a prior versioning scheme that utilized commit IDs. Every Medusa build will create a new version. This means that clicking "Build Now" will generate a new version and docker artifact.

<!--- Reused Links --->
[Medusa]: https://github.com/EBSCOIS/platform.infrastructure.medusa