## PI12 - I2

### DEPRECATIONS/CHANGES

* **Pipeline Library, JenkinsLib and Live Jenkins Server:**
  * Old JenkinsLib library will not be supported in RefArch 1.5
    * https://github.com/EBSCOIS/platform.infrastructure.jenkinslib
  * Jenkins LIVE (jenkins.eis-platformlive.cloud) not to be used with RefArch 1.5
  * Medusa and platform.infrastructure.pipelinelibrary are the only options in RefArch 1.5
    * https://github.com/EBSCOIS/platform.infrastructure.medusa
    * https://github.com/EBSCOIS/platform.infrastructure.pipelinelibrary
  * Primary Contact: Matt Conescu or Eric Peacock
    [How to Request Assistance : http://confluence.corp.epnet.com/pages/viewpage.action?title=How+To+Request+Assistance+From+fourEighteen&spaceKey=TCO ]

**NOTE: These are BREAKING CHANGES, so please make sure to update jenkinsfile and deployment manifest before deploying to the **dev** environment**
* **Jenkinsfile and Default.yaml Changes**
    * **Jenkinsfile**
        * `sudo` commands are no longer supported in the new `refarch15a` jenkins server. Please make updates to the jenkinsfile to reflect this.
            * Use the new gradle docker image for this: `docker.image("platform/images/gradle-refarch15a")`

        * Change `sonar.host.url` in `build.gradle` to point to the new refarch15a sonar-server.
          * `property 'sonar.host.url', "http://sonarqube73.eis-platformlive.cloud"`

        * Node/npm/nvm are no longer installed on the jenkins nodes, so Node projects must execute their audit/ci/test/[build]/[publish] scripts within Docker.
            * Reference implementation can be found in the ebsconext-ui repository here: https://github.com/EBSCOIS/discover.shared.ebsconext-ui/blob/c0542cf-build%237/Jenkinsfile#L14-L42

        * **Hydra commands**
            * To deploy to sandbox env, please use the label `sandbox` instead of `ea-devqa`
            * `hydraPreview`: All preview envs will deploy to the `default` namespace and the Jenkinsfiles will have to add this argument for this to work (this is a known hydra issue that will be resolved before I4).
            * `hydraDeploy`: All microservices will deploy to the `application` namespace by default now.
            * The default number of replicas for a microservice deployed to the kubernetes clusters would be `1`. This can be changed using the `instances` argument when calling `hydraDeploy`.
                    `hydraPreview deployEnv: "dev", namespace: "application", instances: 1`
                    `hydraDeploy deployEnv: "dev"`

        * SAMPLE JENKINSFILES
            * JAVA: https://github.com/EBSCOIS/platform.training.simplemiddle-refarch1.5a/blob/master/Jenkinsfile
            * NODE: https://github.com/EBSCOIS/discover.shared.ebsconext-ui/blob/master/Jenkinsfile

    * **Deployment manifest (hydra/default.yaml)**
        * Hydra deploy will now require health check endpoints in order to be able to configure the `LivenessProbe` and `Readiness` kubernetes probes for the application pods.
            * RECOMMENDED HEALTH ENDPOINTS for app are `/admin/health` and port `8081`
            * JAVA SAMPLE with override of default health endpoints [default.yaml](https://github.com/EBSCOIS/platform.training.demoprovider/blob/master/hydra/manifest/default.yaml#L14)
            * NODE SAMPLE with required [configuration](https://github.com/EBSCOIS/discover.shared.ebsconext-ui/blob/c0542cf-build%237/hydra/manifest/default.yaml#L26-L39) and [code](https://github.com/EBSCOIS/discover.shared.ebsconext-ui/blob/c0542cf-build%237/src/server/temp-health.js) changes. (Note that this requirement **only** applies to runtime services; Node libraries or CLI tools which do not deploy a service into the cluster are exempt.)
            * More information available in the `Hydra Service Health Endpoint` section below.

### NEW FEATURES
* **Github Autowire:** No More Org Scans, Autowiring Mechanism will place Github Repositories in Jenkins Server
    * Single Repository Adoption:
      Create New Label for Repository called `jenkins-refarch15b` (for medusa only), or `jenkins-refarch15a`
      This will create the project on the Jenkins Server and create necessary webhooks for the Github Repository
      To move your job from https://jenkins-refarch15a.eis-platformlive.cloud to https://jenkins-refarch15b.eis-platformlive.cloud
      * Remove the `jenkins-refarch15a`  label from your repo
      * Confirm job was removed from https://jenkins-refarch15a.eis-platformlive.cloud
      * Add a new label `jenkins-refarch15b` to your repo
      * Confirm job was added from https://jenkins-refarch15b.eis-platformlive.cloud
      * __**Editing the label instead of removing and re-adding will not work**__

    * Multiple Repository Adoption:
      Create a Branch in https://github.com/EBSCOIS/platform.infrastructure.jenkins-webhooks
      Modify https://github.com/EBSCOIS/platform.infrastructure.jenkins-webhooks/blob/master/data/migrate.yaml to reflect the Repo's that need to be migrated to the new Jenkins and create a PR with the changes.
      Example:
      jenkins-refarch15b:
        repo_name:
          - platform.training.repo1
          - platform.training.repo2
          - platform.training.repo3
      All Repository Webhooks will be updated, and Projects created in the new Jenkins Server.

    [Please DO NOT Delete the infrastructure.eis-platformlive.cloud webhook from your repository webhooks]

    * Documentation for Repo Adoption:
      https://github.com/EBSCOIS/platform.infrastructure.jenkins-webhooks/blob/master/README.md
      http://confluence/display/TCO/Jenkins+Webhook+Automation
    * Primary Contact: Matt Conescu or Eric Peacock
      [How to Request Assistance : http://confluence.corp.epnet.com/pages/viewpage.action?title=How+To+Request+Assistance+From+fourEighteen&spaceKey=TCO ]

* **New Jenkins Server:**
   * New Jenkins Server:
     https://jenkins-refarch15b.eis-platformlive.cloud (medusa only)
     https://jenkins-refarch15a.eis-platformlive.cloud (medusa and pipelinelibrary supported)


   * Primary Contact: Matt Conescu or Eric Peacock
      [How to Request Assistance : http://confluence.corp.epnet.com/pages/viewpage.action?title=How+To+Request+Assistance+From+fourEighteen&spaceKey=TCO ]


* **Hydra Customizable Metric Endpoint:** Hydra now supports customizable metric endpoints.
    * Defaults to path `/admin/prometheus` on port `8081` (metrics-custom = false)
    * Can be changed in the `deployment manifest` under `MetricsEndpoint:` (metrics-custom = true)
    * Stored under annotations in `metrics-path`, `metrics-io-port`, and `metrics-custom`.
    * For more information check our [wiki](https://github.com/EBSCOIS/platform.infrastructure.hydra/wiki/Deployment-Manifest#metric-endpoints)
    * Contact [Team Cahaba](EISOPFCahaba@EBSCOInd.onmicrosoft.com) via email or Teams for support

* **Hydra Service Health Endpoint:** Hydra now supports service health endpoints to know when a container is ready to start accepting traffic. To get started using a service health endpoint, you will first need to add it to the [deployment manifest](https://github.com/EBSCOIS/platform.infrastructure.hydra/wiki/Deployment-Manifest)
    * Service health endpoint is optional, but it defaults to /health and 8081 if it's not provided. The endpoint should return status 200, the contents do not matter at this time.
    * For more information, please take a look at our [wiki](https://github.com/EBSCOIS/platform.infrastructure.hydra/wiki/Deployment-Manifest#service-health-policy-optional)
    * Contact [Team Cahaba](EISOPFCahaba@EBSCOInd.onmicrosoft.com) via email or Teams for support

* **Java Scaffolding Project -- BETA release :** This is a project, driven via Jenkins as a build job, to generate a skeleton repo in Java for the 1.5 Ref Architecture which will include sample tests, quality gates as well as deploy to the dev Kubernetes cluster.
    * Link to repo with documentation on how to use the project: [platform.scaffolding.java](https://github.com/EBSCOIS/platform.scaffolding.java)
    * This is a *beta release* as there will be enhancements made to the scaffolding generator when the Java PDK feature is completed.
      * The [refarch1.5-java-logging-library](https://github.com/EBSCOIS/platform.shared.logging) has been completed and will be made available for scaffolded projects in I3/I4.
      * The metrics and distributed-tracing shared libraries will not be wired up if you generate a repo using this project in I3/I4 and the generated project will need to be *patched* later when this functionality is available to reflect the latest state of the project.
      * Starting in I3, newly scaffolded projects will have webhooks for build jobs on the [new jenkins-refarch15a server](https://jenkins-refarch15a.eis-platformlive.cloud).
      * RefArch 1.5 microservice GitHub repositories must to be updated to avoid building on legacy Jenkins. Delete Jenkins webhook for https://jenkins-public.eis-platformlive.cloud/github-webhook from **GitHub repository > Settings > Webhooks**
    * Please contact Team REX or EA team members on the [RefArch1.5 Troubleshooting Channel](https://teams.microsoft.com/l/channel/19%3aa2a0927486e74b35bbd033a54fc5495c%40thread.skype/Troubleshooting?groupId=9b1ce806-0126-471c-8e35-77b3115110e6&tenantId=50fa36ca-7dd3-44f1-9e3f-1bf39a3963a5) for support or to provide feedback if there are any issues.

* **Node UI & Edge Scaffolding Projects -- BETA releases :** These are two distinct Node-based CLI tools to aid in the scaffolding of new Node projects, which include boilerplate code, configuration, and tests, as well as pipeline scripts to enable rapid bootstrapping and deployment of new services to the Ref Arch 1.5 service mesh. The details of what's provided out-of-the-box differ between the two projects, so please refer to their READMEs for more detailed information.
    * Links to repos with instructions for use:
      * [platform.infrastructure.generator-ui](https://github.com/EBSCOIS/platform.infrastructure.generator-ui)
      * [platform.infrastructure.generator-node-express](https://github.com/EBSCOIS/platform.infrastructure.generator-node-express)
    * Disclaimer: These are *beta releases* and should be considered works-in-progress; they will be updated and enhanced to keep in-line with pipeline and infrastructure changes, as well as provide improved functionality and greater test coverage. Be aware that keeping generated code up-to-date with changes in generators is an inherently manual process and detailed migration instructions will not be provided as the projects evolve, so careful consideration should be given before relying on early-phase code-generators.

* **Kiali Support:** Kiali (https://www.kiali.io/) will be added as a standard monitoring component within the Kubernetes clusters. Monitoring web page will serve as index page to access Kiali and the link for which will be an output in the Jenkisn Job while running Service-mesh pipeline.

### BUG FIXES
* **Bug Fix 1:** Description of issue being solved
    * Are there any changes needed by teams or is this resolved behind the scenes?
    * List any workarounds that will need to be removed now that this issue is resolved
    * Who is the primary contact for questions?

<!--- reused links --->
[Medusa]: https://github.com/EBSCOIS/platform.infrastructure.medusa